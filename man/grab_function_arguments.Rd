% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fun_$_initialization_and_work_with_lists_00.R
\name{grab_function_arguments}
\alias{grab_function_arguments}
\title{Grab All Function Arguments}
\usage{
grab_function_arguments()
}
\value{
A list containing the names and values of all arguments passed to the
 calling function. Named arguments and those supplied through `...` are
 included.
}
\description{
This function captures all arguments passed to the calling
function, including those specified via `...` (ellipsis). It is useful for
debugging, logging, or functions that need to programmatically process their
own arguments.
}
\details{
The function retrieves the names and values of all arguments in the
parent frame, which corresponds to the environment from which it was called.
This includes handling both explicitly named arguments and those passed
through `...`. The solution is particularly useful in scenarios where a
function's behavior needs to be dynamically adjusted based on the arguments
it receives.

Derived from a solution on [Stack Overflow](https://stackoverflow.com/questions/66329835/using-r-how-to-get-all-parameters-passed-into-a-function-with-their-values).
}
\examples{
\dontrun{
my_function <- function(z, pi_0 = 0.3, families = list(), ...) {
  args <- grab_function_arguments()
  names(args)  # Returns the names of all arguments
  return(args)  # Returns a list of all arguments
}

X <- my_function(z = 4
                , a = 345
                , families = list(a = 34, b = 545)
                , myList = list(a = 34, b = 545))
print(X)
}

}
\keyword{internal}
