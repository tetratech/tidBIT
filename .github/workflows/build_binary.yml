name: R package release build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-windows:
    runs-on: windows-latest
    env:
      OS_TYPE: windows

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up R environment
      - name: Set up R
        uses: r-lib/actions/setup-r@v2

      # Install Rtools and dependencies
      - name: Install Rtools and Dependencies
        run: |
          choco install mingw -y
          choco install rtools -y
          refreshenv

      # Manually install GSL as Chocolatey lacks a GSL package
      - name: Install GSL Manually
        run: |
          echo "Downloading GSL binaries manually."
          curl -o gsl.zip https://ftp.gnu.org/gnu/gsl/gsl-latest.tar.gz
          tar -xzf gsl-latest.tar.gz -C C:/msys64/mingw64
          echo "GSL installation completed."

      # Debug library paths
      - name: Debug Library Paths
        run: |
          echo "Checking GSL library in Windows:"
          dir C:\msys64\mingw64\lib\gsl* || echo "GSL library not found"
          echo "Checking MinGW binaries:"
          dir C:\msys64\mingw64\bin || echo "MinGW binaries not found"
          echo "Verifying PATH:"
          echo %PATH%

      # Verify Rtools installation
      - name: Verify Rtools Installation
        run: |
          echo "Checking Rtools installation:"
          where gcc || echo "GCC not found"
          where make || echo "Make not found"

      # Configure Makevars
      - name: Configure Makevars
        run: |
          echo "Setting up Makevars file for Windows."
          mkdir -p %USERPROFILE%\.R
          echo CC=gcc > %USERPROFILE%\.R\Makevars.win
          echo CXX=g++ >> %USERPROFILE%\.R\Makevars.win
          echo PKG_CFLAGS=-I"C:/msys64/mingw64/include" >> %USERPROFILE%\.R\Makevars.win
          echo PKG_LIBS=-L"C:/msys64/mingw64/lib -lgsl -lgslcblas" >> %USERPROFILE%\.R\Makevars.win
          type %USERPROFILE%\.R\Makevars.win

      # Install key R packages
      - name: Install Key R Packages
        run: |
          Rscript -e 'install.packages(c("remotes", "desc", "devtools"))'

      # Install dependencies for the package
      - name: Install Dependencies
        run: |
          Rscript -e 'remotes::install_deps(dependencies = TRUE)'

      # Build Windows binary package
      - name: Build Windows Binary
        run: |
          mkdir -p artifacts
          Rscript -e "devtools::build(binary = TRUE, path = 'artifacts')"

      # Debug built files
      - name: Debug Built Files
        run: |
          echo "Listing artifacts directory:"
          dir artifacts


  # build-linux:
  #   runs-on: ubuntu-latest
  #   env:
  #     OS_TYPE: linux
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  # 
  #     - name: Set up R
  #       uses: r-lib/actions/setup-r@v2
  # 
  #     - name: Install System Dependencies
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install -y libgsl-dev libomp-dev libudunits2-dev libproj-dev libgdal-dev build-essential gcc gfortran
  # 
  #     - name: Debug Library Paths
  #       run: |
  #         echo "Checking GSL library:"
  #         ldconfig -p | grep gsl || echo "GSL library not found"
  #         echo "Checking OpenMP library:"
  #         ldconfig -p | grep omp || echo "OpenMP library not found"
  # 
  #     - name: Clean Up Precompiled Files
  #       run: |
  #         find src -name "*.o" -type f -delete
  #         find src -name "*.so" -type f -delete
  # 
  #     - name: Install Key R Packages
  #       run: |
  #         Rscript -e 'install.packages(c("remotes", "desc", "devtools"))'
  # 
  #     - name: Install Dependencies with Retries
  #       run: |
  #         for i in {1..3}; do Rscript -e 'remotes::install_deps(dependencies = TRUE)' && break || sleep 15; done
  # 
  #     - name: Build Linux Binary
  #       env:
  #         PKG_CFLAGS: "-fopenmp"
  #         PKG_LIBS: "-L/lib/x86_64-linux-gnu -lgsl -lgslcblas -fopenmp -lm"
  #         LD_LIBRARY_PATH: "/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH"
  #       run: |
  #         mkdir -p artifacts
  #         R CMD INSTALL --configure-vars="PKG_CFLAGS='-fopenmp' PKG_LIBS='-L/lib/x86_64-linux-gnu -lgsl -lgslcblas -fopenmp -lm'" --debug .
  #         Rscript -e "devtools::build(binary = TRUE, path = 'artifacts')"
  # 
  #     - name: Debug Built Files
  #       run: |
  #         echo "Listing artifacts directory:"
  #         ls -l artifacts
  # 
  # build-macos:
  #   runs-on: macos-latest
  #   env:
  #     OS_TYPE: darwin
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  # 
  #     - name: Set up R
  #       uses: r-lib/actions/setup-r@v2
  # 
  #     - name: Install Xcode Command Line Tools
  #       run: |
  #         xcode-select --install || echo "Command line tools already installed"
  # 
  #     - name: Install macOS System Dependencies
  #       run: |
  #         brew update
  #         brew install gcc gdal proj libomp
  # 
  #     - name: Configure Makevars for macOS
  #       run: |
  #         mkdir -p ~/.R
  #         echo "CC=$(brew --prefix gcc)/bin/gcc-$(brew list gcc | grep gcc- | awk -F'-' '{print $2}')" >> ~/.R/Makevars
  #         echo "CXX=$(brew --prefix gcc)/bin/g++-$(brew list gcc | grep gcc- | awk -F'-' '{print $2}')" >> ~/.R/Makevars
  #         echo "CFLAGS=-fopenmp" >> ~/.R/Makevars
  #         echo "CXXFLAGS=-fopenmp" >> ~/.R/Makevars
  #         echo "LDFLAGS=-L$(brew --prefix libomp)/lib -lomp" >> ~/.R/Makevars
  # 
  #     - name: Install Key R Packages
  #       run: |
  #         Rscript -e 'install.packages(c("remotes", "desc", "devtools"))'
  # 
  #     - name: Install Dependencies with Retries
  #       run: |
  #         for i in {1..3}; do Rscript -e 'remotes::install_deps(dependencies = TRUE)' && break || sleep 15; done
  # 
  #     - name: Debug Build Tools
  #       run: |
  #         echo "Checking build tools..."
  #         Rscript -e 'pkgbuild::check_build_tools(debug = TRUE)'
  # 
  #     - name: Build macOS Binary
  #       run: |
  #         mkdir -p artifacts
  #         Rscript -e "devtools::build(binary = TRUE, path = 'artifacts')"
  # 
  #     - name: Debug Built Files
  #       run: |
  #         echo "Listing artifacts directory:"
  #         ls -l artifacts


  # release:
  #   needs: [build-linux, build-macos, build-windows]
  #   runs-on: ubuntu-latest
  # 
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  # 
  #     - name: Create or Update GitHub Release
  #       uses: softprops/action-gh-release@v1
  #       with:
  #         tag_name: "v${{ env.version }}"
  #         name: "v${{ env.version }} Release"
  #         body: "Release notes for version ${{ env.version }}."
  #         files: |
  #           artifacts/tidBIT_*.zip
  #           artifacts/tidBIT_*.tgz
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         
          
          
  release:
    needs: [build-windows] # Remove build-linux and build-macos for now
    runs-on: ubuntu-latest
  
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
  
      - name: Create or Update GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v${{ env.version }}"
          name: "v${{ env.version }} Release"
          body: "Release notes for version ${{ env.version }}."
          files: |
            artifacts/tidBIT_*.zip # Only include Windows binary for now
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
