

name: R Package Release Workflow 

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Job to build the precompiled Windows binary
  build-windows:
    runs-on: windows-latest
    env:
      OS_TYPE: windows  # Define the platform for conditional configurations

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up R environment
      - name: Set up R
        uses: r-lib/actions/setup-r@v2

      # Step 3: Install system dependencies
      - name: Install required tools via Chocolatey
        run: |
          echo "Installing required tools using Chocolatey"
          choco install rtools -y
          choco install mingw -y

      # Step 4: Configure PATH for MinGW and Rtools
      - name: Update PATH environment
        run: |
          echo "Adding MinGW and Rtools to PATH"
          $pathToAdd = "C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\bin;C:\rtools44\usr\bin"
          [System.Environment]::SetEnvironmentVariable("PATH", $pathToAdd + ";" + [System.Environment]::GetEnvironmentVariable("PATH", [System.EnvironmentVariableTarget]::Process), [System.EnvironmentVariableTarget]::Process)
          echo "Updated PATH: $env:PATH"

      # Step 5: Verify installation
      - name: Verify dependencies
        run: |
          echo "Checking for GCC compiler:"
          where gcc || echo "GCC not found"
      
          echo "Checking for Make utility:"
          where make || echo "Make not found"
      
          echo "Checking for MinGW installation:"
          $mingwPaths = @(
            "C:\ProgramData\chocolatey\lib\mingw\tools\install",
            "C:\mingw64"
          )
          $foundMinGW = $false
          foreach ($path in $mingwPaths) {
            if (Test-Path $path) {
              echo "MinGW installation found at: $path"
              $foundMinGW = $true
              break
            }
          }
          if (-not $foundMinGW) {
            echo "MinGW installation not found in the following paths:"
            $mingwPaths | ForEach-Object { echo $_ }
            exit 1
          }
      
          echo "Checking for Rtools installation:"
          if (Test-Path "C:\Program Files\Rtools") {
            echo "Rtools installation found at C:\Program Files\Rtools"
          } else {
            echo "Rtools installation not found at C:\Program Files\Rtools"
            exit 1
          }
        shell: C:\Program Files\PowerShell\7\pwsh.EXE -command ". '{0}'"
        env:
          OS_TYPE: windows
          _R_INSTALL_TIME_PATCHES_: no
          R_LIBS_USER: D:\a\_temp\Library
          TZ: UTC
          _R_CHECK_SYSTEM_CLOCK_: FALSE
          NOT_CRAN: true


      # Step 6: Install R package dependencies
      - name: Install R dependencies
        run: |
          Rscript -e 'install.packages(c("devtools", "desc", "remotes"))'
          Rscript -e 'remotes::install_deps(dependencies = TRUE)'

      # Step 7: Build Windows binary
      - name: Build Windows binary
        run: |
          mkdir -p artifacts
          echo "Building Windows binary"
          Rscript -e "devtools::build(binary = TRUE, path = 'artifacts')" || exit 0

      # Step 8: Upload artifacts
      - name: Upload Windows binary artifact
        if: success()  # Proceed regardless of the build's outcome
        uses: actions/upload-artifact@v3
        with:
          name: windows-binary
          path: artifacts/*.zip

  # Job to package the source files
  package-source:
    runs-on: ubuntu-latest  # Use Ubuntu for better performance when packaging source code

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up R environment
      - name: Set up R
        uses: r-lib/actions/setup-r@v2

      # Step 3: Build source package
      - name: Build source package
        run: |
          mkdir -p artifacts
          echo "Building source package"
          R CMD build .
          mv *.tar.gz artifacts/

      # Step 4: Upload source package artifacts
      - name: Upload source artifacts
        uses: actions/upload-artifact@v3
        with:
          name: source-package
          path: artifacts/*.tar.gz

  # Job to create a release
  create-release:
    needs: [build-windows, package-source]  # Depends on the previous jobs
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Create or update the GitHub release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v${{ github.run_number }}"  # Use the run number as a tag
          name: "Release v${{ github.run_number }}"
          body: |
            ### Release Notes
            - Includes source package (.tar.gz)
            - Includes Windows binary (if successfully built)
          files: |
            artifacts/*.zip
            artifacts/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}




